<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Hexo的世界</title>
    <link href="/2021/02/18/hello-world/"/>
    <url>/2021/02/18/hello-world/</url>
    
    <content type="html"><![CDATA[<h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><hr><p>其实博主是从2015年底就开始接触hexo了，但是因为当时并没有写博客的习惯，也没有记录任何信息的爱好，所有的尝试都被自己当成一次尝试就这么过去了。转眼间就到了2018年了，想着自己一事无成的博客之路，也是挺不好意思的，那就把本文当成了一个真正的开始。这个努力，但是最后却以丢失hexo本地文件而最终破产！唉，索性博主跟小强一样，越挫越勇，还是打算重新来过，而这款hexo对于还没有自己服务器的小伙伴们，是比较友好的毕竟可以直接部署到github上面，如果说已经有自己服务器的同学，我还是比较建议自己动手搭建一个从零开始的自己的博客网站，毕竟作为前端的同学们，我们的vue、react、angular三大框架还是很有意思的，后端我们也是可以直接接触node，express不错！虽然目前来说有点小过时，但是对于学习技术，还是可以的。那么接下来我们还是正文开始~<br>let’s go~</p><h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><hr><p>我们在开始hexo的搭建之前，首先我们需要先分别到git跟node官网下载下来我们需要用到的git跟node。</p><p><code>我们在开始hexo的搭建之前，首先我们需要先分别到git跟node官网下载下来我们需要用到的git跟node。</code></p><h4 id="下载hexo-cli"><a href="#下载hexo-cli" class="headerlink" title="下载hexo-cli"></a>下载hexo-cli</h4><blockquote><p>npm i -g hexo-cli</p></blockquote><p>检查hexo是否下载好,如果有下列信息就说明已经有了</p><blockquote><p><code>hexo -v</code><br><img src="/img/hexo_init_v.png" alt="hexo 版本信息"></p></blockquote><p>构建hexo文件,安装依赖</p><blockquote><p>hexo init <folder><br>cd <folder><br>npm install<br><code>在这里还是要首先说明一下，如果想生成新的文件夹，可以用hexo new “My New Post”,当然看你自己的习惯，我比较建议新人可以用命令熟悉。</code></p></blockquote><p>修改hexo文件配置信息</p><blockquote><p>hexo文件中的配置皆放在_config.yml文件中，一般我们需要更改的就是：</p><ul><li>title: BlackLike （主标题）</li><li>subtitle: BlackLike’s blog （副标题）</li><li>description: This is BlackLike’s Blog, welcome to everybody. （描述信息）</li><li>author: BlackLike （作者即博主）</li></ul><p><em>以上几个为基本配置，后面还需要修改相应的配置，暂时不在此处指出，我们一步一步来</em></p></blockquote><p>本地运行</p><blockquote><p>当我们的基本配置已经完成以后，我们可能是需要先在本地查看一下效果，那么就需要我们运行一下<br><code>hexo server</code> or <code>hexo s</code></p></blockquote><h4 id="部署上github"><a href="#部署上github" class="headerlink" title="部署上github"></a>部署上github</h4><blockquote><p>本地查看了信息，感觉已经很不错了，那么我们就可以先把目前版本信息上传至github中的个人仓库中，在这里我们需要一下几步操作</p><ol><li>首先我们需要回到_config.yml文件中去，修改deploy：下面的信息，一般我们只要写：</li></ol><ul><li>type: git</li><li>repo: （远程仓库）<code>这里要注意，你的远程仓库的名称要跟你的用户名一致，比方我的是blacklike，我的仓库就是blacklike。github.io</code></li><li>branch：（分支名，一般都是master）</li></ul><ol start="2"><li>修改以后，我们需要先配置ssh，这个步骤我就不讲了，网络上有很多的博客是能写到的，所以如果配置好了ssh可以直接跳过这一步，如果没有配置的，应该是不想配置ssh的同学，请配置你的全局的git信息：</li></ol><ul><li>git config –golbal user.email “<a href="mailto:&#x79;&#111;&#117;&#x40;&#121;&#x6f;&#x75;&#x2e;&#x63;&#x6f;&#x6d;">&#x79;&#111;&#117;&#x40;&#121;&#x6f;&#x75;&#x2e;&#x63;&#x6f;&#x6d;</a>“</li><li>git config –golbal user.name “youname”</li></ul><ol start="3"><li>hexo generate (可以简写为hexo g)</li><li>hexo deploy (可以简写为 hexo d)<br>注意如果第四步出现了<code>ERROR Deployer not found: git</code>,说明你还没有为hexo安装git插件，需要运行<code>npm i hexo-deployer-git --save</code>进行安装。然后再执行第四部，然后就到你的github上面看看你的文件信息是否部署好。需要注意的是，因为hexo是部署上去的，而不是push上去的，所以只会把public里面的信息部署到上面，所以千万不要删除你本地的hexo文件，因为删除了就没有了，你如果想在git上面单独存储，可以开个仓库，单独存放。</li></ol></blockquote><h4 id="github上的配置"><a href="#github上的配置" class="headerlink" title="github上的配置"></a>github上的配置</h4><blockquote><p>文件部署完成以后，我们能看到仓库页面有个settings<br><img src="/img/setting_menu.jpg" alt="github 导航栏"><br>点击进去，设置你博客进入的入口地址<br><img src="/img/github_setting_url.jpg" alt="setting 页面"><br>这样就可以根据绿色条进入到你的博客地址当中去了！</p></blockquote><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><ol><li><code>地址打开发现css等样式都是没有的，为什么呢？</code></li></ol><p>很多小伙伴可能在部署到github上以后打开生成好的url的时候，发现页面当中样式都是没有的，可能很疑惑，当然不需要太惊慌，可能是你的配置还没有把路径配置好<br>这时候，我们可以回到_config.yml当中，找到以下几个属性：<br>    - url: 你的url地址<br>    - root: 你的文件名，如果你没有另开文件夹，这里可以只设置-&gt; /</p><p>设置好以后，重新部署一下，就完美了，可以玩耍了~</p><h4 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h4><p>以上都是从零开始搭建到上传github的过程，接下来说点其他的，hexo会存在默认的主题，或许很多小伙伴都不想跟人一样，想有点自己的主题特色，那就试试，hexo的主题设置吧~</p><blockquote><p>首先，你先进入到<a href="https://hexo.io/themes/">Hexo的主题专线</a><br>然后选择你想要的喜欢的Hexo的主题<br>点击进去，一般来说都能进入到该主题的github的页面，根据作者的文档进行主题的下载跟设置</p></blockquote><h3 id="写在最后的温馨提示"><a href="#写在最后的温馨提示" class="headerlink" title="写在最后的温馨提示"></a>写在最后的温馨提示</h3><p>由于本人血的教训，已经不下几次重新创建这个hexo博客了，最头疼的就是将本地的hexo推到远程以后，远程创建的只是一个hexo编译好的架构，一旦本地的hexo文件丢失，即使把远程的文件拉下来也没有用，依旧要重新init搭建一个hexo，没有任何方式找回丢失删除的hexo本地文件，这是血的教训，请使用hexo的各位小伙伴切记，你通过hexo命令推送了一版编译好的hexo博客的同时，请做好本地hexo文件的备份跟储存，非常重要！！！！切记！！！！！</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
